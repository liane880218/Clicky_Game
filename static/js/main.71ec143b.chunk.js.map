{"version":3,"sources":["components/CaracterCard/index.js","components/Wrapper/index.js","components/Title/index.js","components/Score/index.js","App.js","serviceWorker.js","index.js"],"names":["CaracterCard","props","react_default","a","createElement","className","alt","name","src","image","onClick","handleClick","Wrapper","children","Title","Score","score","topscore","message","App","state","clicked","thebeatles","shuffleArray","i","_this","length","j","Math","floor","random","_ref","indexOf","setState","concat","_this2","this","components_Wrapper","components_Title","components_Score","map","thebeatle","components_CaracterCard","id","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6gCAaeA,MAVf,SAAsBC,GACpB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,MAAOJ,UAAU,gBAAgBK,QAAS,kBAAMT,EAAMU,YAAYV,EAAMM,kBCAlGK,MAJf,SAAiBX,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMY,iBCQ1BC,MATf,SAAeb,GACb,OACAC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,0BAAqBF,EAAAC,EAAAC,cAAA,WACrBF,EAAAC,EAAAC,cAAA,qGCIWW,MARf,SAAed,GACb,OACAC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,oBAAYH,EAAMe,MAAlB,uBAA6Cf,EAAMgB,SAAnD,KAA+DhB,EAAMiB,WC0D1DC,6MAvDbC,MAAQ,CACNC,QAAS,GACTC,aACAN,MAAM,EACNC,SAAS,EACTC,QAAS,6BAGXK,aAAe,WACb,IAAK,IAAIC,EAAIC,EAAKL,MAAME,WAAWI,OAAS,EAAGF,EAAI,EAAGA,IAAK,CACzD,IAAIG,EAAIC,KAAKC,MAAMD,KAAKE,UAAYN,EAAI,IADiBO,EAEF,CAACN,EAAKL,MAAME,WAAWK,GAAIF,EAAKL,MAAME,WAAWE,IAAvGC,EAAKL,MAAME,WAAWE,GAFkCO,EAAA,GAE9BN,EAAKL,MAAME,WAAWK,GAFQI,EAAA,GAI3D,OAAON,EAAKL,MAAME,cAGpBX,YAAc,SAACJ,GACb,IAAIc,EAAUI,EAAKL,MAAMC,SACM,IAA3BA,EAAQW,QAAQzB,IAClBkB,EAAKQ,SAAS,CACZZ,QAASA,EAAQa,OAAO3B,GACxBS,MAAOS,EAAKL,MAAMJ,MAAQ,EAC1BC,SAAUQ,EAAKL,MAAMJ,MAAQ,EAAIS,EAAKL,MAAMH,SAAWQ,EAAKL,MAAMJ,MAAQ,EAAIS,EAAKL,MAAMH,SACzFC,QAAS,8BAEXO,EAAKF,gBAGLE,EAAKQ,SAAS,CACZf,QAAS,+BACTF,MAAO,EACPK,QAAS,8EAKN,IAAAc,EAAAC,KACP,OACElC,EAAAC,EAAAC,cAACiC,EAAD,KACEnC,EAAAC,EAAAC,cAACkC,EAAD,MACApC,EAAAC,EAAAC,cAACmC,EAAD,CAAOvB,MAAOoB,KAAKhB,MAAMJ,MAAOC,SAAUmB,KAAKhB,MAAMH,SAAUC,QAASkB,KAAKhB,MAAMF,UAClFkB,KAAKb,aAAaD,GAAYkB,IAAI,SAAAC,GAAS,OAC1CvC,EAAAC,EAAAC,cAACsC,EAAD,CACEC,GAAIF,EAAUE,GACdC,IAAKH,EAAUE,GACfpC,KAAMkC,EAAUlC,KAChBE,MAAOgC,EAAUhC,MACjBE,YAAawB,EAAKxB,wBAhDZkC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.71ec143b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction CaracterCard(props) {\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"img-container\">\r\n        <img alt={props.name} src={props.image} className=\"img-thumbnail\" onClick={() => props.handleClick(props.name)}/>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CaracterCard;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Title(props) {\r\n  return (\r\n  <div className=\"title\">\r\n    <h1>Clicky Game!</h1><br/>\r\n    <h2>Click on an image to earn points, but don't click on any more than once!</h2>\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default Title;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Score(props) {\r\n  return (\r\n  <div className=\"score\">\r\n    <h2>Score: {props.score}    |    Top Score: {props.topscore}  {props.message}</h2>\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default Score;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport CaracterCard from \"./components/CaracterCard\";\r\nimport Wrapper from \"./components/Wrapper\";\r\nimport Title from \"./components/Title\";\r\nimport thebeatles from \"./thebeatles.json\";\r\nimport Score from \"./components/Score\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    clicked: [],\r\n    thebeatles,\r\n    score:0,\r\n    topscore:0,\r\n    message: \"Click an image to begin\"\r\n  };\r\n\r\n  shuffleArray = () => {\r\n    for (var i = this.state.thebeatles.length - 1; i > 0; i--) {\r\n      var j = Math.floor(Math.random() * (i + 1));\r\n      [this.state.thebeatles[i], this.state.thebeatles[j]] = [this.state.thebeatles[j], this.state.thebeatles[i]];\r\n    }\r\n    return this.state.thebeatles;\r\n  }\r\n\r\n  handleClick = (name) => {\r\n    var clicked = this.state.clicked;\r\n    if (clicked.indexOf(name) === -1) {\r\n      this.setState({\r\n        clicked: clicked.concat(name),\r\n        score: this.state.score + 1,\r\n        topscore: this.state.score + 1 > this.state.topscore ? this.state.score + 1 : this.state.topscore,\r\n        message: \"You guessed correctly!!!!\" \r\n      })\r\n      this.shuffleArray();\r\n    }\r\n    else {\r\n      this.setState({\r\n        message: \"You guessed incorrectly!!!!!\",\r\n        score: 0,\r\n        clicked: []\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Wrapper>\r\n        <Title></Title>\r\n        <Score score={this.state.score} topscore={this.state.topscore} message={this.state.message}></Score>\r\n        {this.shuffleArray(thebeatles).map(thebeatle => (\r\n          <CaracterCard \r\n            id={thebeatle.id}\r\n            key={thebeatle.id}\r\n            name={thebeatle.name}\r\n            image={thebeatle.image}\r\n            handleClick={this.handleClick}\r\n          />\r\n        ))}\r\n      </Wrapper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}